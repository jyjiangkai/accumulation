在Golang中，array是值传递方式，而slice是引用类型，故是引用传递，但并不是任何时候都建议使用slice来避免数据拷贝提升性能。
比如下面两个函数：
```
func array() [10000]int {
  var d [10000]int
  for i := 0; i < len(d); i++ {
    d[i] = 1    //为避免编译器优化，特填充了全部数据，以模拟 “真实” 数据复制行为。
  }
  return d
}

func slice() []int {
  d := make([]int, 10000)
  for i := 0; i < len(d); i++ {
    d[i] = 1    //为避免编译器优化，特填充了全部数据，以模拟 “真实” 数据复制行为。
  }
  return d
}
```
使用golang自带的性能测试框架测试发现array非但拥有更好的性能，还避免了堆内存分配，也就是说减轻了GC压力。
原因是因为整个array函数完全在栈上完成，而slice函数则需执行makeslice，继而在堆上分配内存，这就是问题所在。

所以，对于一些短小的对象，复制成本远小于在堆上分配和回收操作。

内容来源于：https://www.jianshu.com/p/f5aada70e9a6
