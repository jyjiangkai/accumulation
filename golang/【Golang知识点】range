range类似迭代器，可以遍历数组，字符串，map等等，对象的不同，返回的结果也不同。
```
package main
import "fmt"
func main(){
    //数组的遍历
    a := [3]int {1, 2, 3}
    for i, n := range a{
        fmt.Println(i, n)
    }
    //切片的遍历
    b := []int{2, 3, 4}
    for i, n := range b{
        fmt.Println(i, n)
    }
    //map的遍历
    c := map[string]int{"Hello":1, "World":2}
    for k, v := range c{
        fmt.Println(k, v)
    }
}
//Output:
0 1
1 2
2 3
0 2
1 3
2 4
Hello 1
World 2
```

二、注意事项

1. range会复制对象，而不是不是直接在原对象上操作。

示例一：
```
package main
import "fmt"
func main(){
    a := [3]int {1, 2, 3}
    for _, v := range a{ //复制一份a遍历[1, 2, 3]
        v += 100 //v是复制对象中的值，不会改变a数组元素的值
    }
    fmt.Println(a) //1 2 3
}
```
示例二：
```
package main
import "fmt"
func main(){
    a := [3]int {1, 2, 3}
    for i, v := range a{ //i,v从a复制的对象里提取出
        if i == 0{
            a[1], a[2] = 200, 300
            fmt.Println(a) //输出[1 200 300]
        }
        a[i] = v + 100 //v是复制对象里的元素[1, 2, 3]
    }
    fmt.Println(a) //输出[101, 102, 103]
}
```
2. 使用range迭代遍历引用类型时，底层的数据不会被复制：
```
package main
import "fmt"
func main(){
    a := []int {1, 2, 3} //改成slice
    for i, v := range a{
        if i == 0{
            a[1], a[2] = 200, 300
            fmt.Println(a) //[1 200 300]
        }
        a[i] = v + 100
    }
    fmt.Println(a) 
}
//Output:
[1 200 300]
[101 300 400]
```
1、当range作用于string时， 第一个返回值为index,第二次是char
```
str := "hello world"
for index, ch := range str {
    fmt.Printf("%d --- %c\n", index, ch)
}
```
2、当range作用于array时， 第一个返回值为index,第二次是value
```
func PrintArray(array [5]int) {
    for index, res := range array {
        fmt.Println(index, "--", res)
    }
}
func main() {
    array := [5]int{1,2,3,4,5}
    PrintArray(array)
}
```
3、当range作用于slice时， 第一个返回值为index,第二次是value
```
arr := [10]int {1,2,3,4,5,6,7,8,9,10}
var slice1 []int = arr[:5]
for _, res := range slice1 {
    fmt.Println(res)
}
```
4、这个不是range的用法了map时， 第一个返回值为value,第二次是ok
```
type Person struct {
    ID string
    Name string
    Addr string
}
func main() {
    var persons map[string] Person = make(map[string] Person)
    persons["123"] = Person {"123", "heihei", "haha"}
    p, ok := persons["123"]
    if ok {
        fmt.Println(p.Name)
    }
    ...
}
```

