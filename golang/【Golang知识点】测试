Go语言内置了测试框架，编写单元测试非常方便。

##命名约定
测试代码位于以_test.go结尾的源文件中，一般与源码在同一个package中。位于同一个package中的主要原因是：测试可以访问package中不可导出的变量，方法等元素。
测试源码可以修改package名，带上_test结尾
修改的package名称，不需要再单独新建立目录，也与源码在一个目录下。参考标准库的bytes中的测试代码，方便使用被测试的元素，可以采用.来import测试的package：
```
package bytes_test
import (
    . "bytes" //表示引用该package下的函数或方法时不需要加包名前缀
    "io"
    ...
)
```
以Test开头的功能测试函数
以Benchmark开头的性能测试函数
以Example开头的样例代码

##测试类型
###范例测试
```
func ExampleHello() {
    hl := hello()
    fmt.Println(hl)
    // Output: hello.
}
```
ExampleXxx主要用于测试在给定输入的情况下方法的输出是否与预期相符，示例函数无需接收参数，但需要使用注释的Output:标记说明示例函数的输出值，未指定Output:标记或输出值为空的示例函数不会被执行，测试将用例标准输出的结果与// Output: expected result注释的预期结果进行一致性比较。如果运行结果与注释中预期不一致，该用例失败。
示例函数需要归属于某个包/函数/类型/类型的方法，具体命名规则如下：
func Example() { ... }      // 包的示例函数
func ExampleF() { ... }    // 函数F的示例函数
func ExampleT() { ... }    // 类型T的示例函数
func ExampleT_M() { ... }  // 类型T的M方法的示例函数

##功能测试
功能测试函数以*testing.T类型为单一参数t，testing.T类型用来管理测试状态和格式化测试日志。测试日志在测试执行过程中积累，完成后输出到标准错误输出。

**常用方法:**
**example3：功能测试Log**
```
func (c *T) Log(args ...interface{})
func (c *T) Logf(format string, args ...interface{})
```
Log和Logf方法用于日志输出，默认只输出错误日志，如果要输出全部日志需要使用-v标识运行go test命令。

**example4：功能测试Fail**
```
func (c *T) Fail()
func (c *T) FailNow()
```

**example5：功能测试Fail示例**
```
func TestFail(t *testing.T) {
    t.Log("mark A")
    t.Fail()
    t.Log("mark B")
}
func TestFailNow(t *testing.T) {
    t.Log("mark C")
    t.FailNow()
    t.Log("mark D")
}
func TestOther(t *testing.T) {
    t.Log("mark E")
}

/* Output:
--- FAIL: TestFail (0.00s)
    student_test.go:44: mark A
    student_test.go:46: mark B
=== RUN   TestFailNow
--- FAIL: TestFailNow (0.00s)
    student_test.go:50: mark C
=== RUN   TestOther
--- PASS: TestOther (0.00s)
    student_test.go:56: mark E
*/
```
Fail标记用例失败，但继续执行当前用例。FailNow标记用例失败并且立即停止执行当前用例，继续执行下一个（默认按书写顺序）用例。

**example6：功能测试Error**
```
func (c *T) Error(args ...interface{})
func (c *T) Errorf(format string, args ...interface{})
```
Error等价于Log加Fail，Errorf等价于Logf加Fail。
```
func (c *T) Skip(args ...interface{})
func (c *T) SkipNow()
func (c *T) Skipf(format string, args ...interface{})
func (c *T) Skipped() bool
```
SkipNow标记跳过并停止执行该用例，继续执行下一个用例。Skip等价于Log加SkipNow，Skipf等价于Logf加SkipNow，Skipped返还用例是否被跳过。

**example8：功能测试Parallel**
```
func (c *T) Parallel()
```
示意该测试用例和其它并行用例（也调用该方法的）一起并行执行。下面构造一个例子来测试Parallel()方法是否真的是并行执行测试用例：

**example9：功能测试Parallel示例**
```
package http
import (
    "os"
    "testing"
    "time"
)

func TestA(t *testing.T) {
    t.Parallel()
    time.Sleep(time.Second * 2)
}

func TestB(t *testing.T) {
    if os.Args[len(os.Args)-1] == "b" {
        t.Parallel()
    }
    time.Sleep(time.Second * 2)
}

输出结果：
**example10：功能测试Parallel输出结果**
```
$ go test -v
=== RUN   TestA
=== PAUSE TestA
=== RUN   TestB
--- PASS: TestB (2.00s)
=== CONT  TestA
--- PASS: TestA (2.00s)
PASS
ok      http 4.029s
$ go test -v -args "b"
=== RUN   TestA
=== PAUSE TestA
=== RUN   TestB
=== PAUSE TestB
=== CONT  TestA
=== CONT  TestB
--- PASS: TestA (2.00s)
--- PASS: TestB (2.00s)
PASS
ok      http 2.028s
```

**常用测试参数：**
参数|说明|示例
--|--|--
-v|输出详细信息|
-parallel|并发执行，默认值为GOMAXPROCS|-parallel 2
-run|指定测试函数，正则表达式|-run “Add”
-timeout|全部测试累计时间超时将引发panic，默认值为10ms|-timeout 1m30s
-count|重复测试次数，默认值为1|-count 2

##性能测试
性能测试函数以接收*testing.B类型为单一参数b，性能测试函数中需要循环b.N次调用被测函数。testing.B类型用来管理测试时间和迭代运行次数，也支持和testing.T相同的方式管理测试状态和格式化测试日志，不一样的是testing.B的日志总是会输出。
启用内存使用分析，使用t.ReportAllocs()

**example10：性能测试ReportAllocs**
```
func BenchmarkWriterFlush(b *testing.B) {
    b.ReportAllocs()
    bw := NewWriter(ioutil.Discard)
    str := strings.Repeat("x", 50)
    for i := 0; i < b.N; i++ {
        bw.WriteString(str)
        bw.Flush()
    }
}
```
停止/重置/启动时间计值，使用b.StopTimer()、b.ResetTimer()、b.StartTimer()

**example12：性能测试Timer**
```
func BenchmarkScanInts(b *testing.B) {
    b.ResetTimer()
    ints := makeInts(intCount)
    var r RecursiveInt
    for i := b.N - 1; i >= 0; i-- {
        buf := bytes.NewBuffer(ints)
        b.StartTimer()
        scanInts(&r, buf)
        b.StopTimer()
    }
}
```
####测试执行
在某一包下执行测试:go test
执行指定的包测试:go test $pkg_in_gopath
执行某一目录下以及子目录下所有测试:go test $pkg_in_gopath/...
执行包下某一些用例:go test -run=xxx，-run参数支持使用正则表达式来匹配要执行的功能测试函数名
执行包下性能测试:go test -bench=.
执行全部性能测试函数: go test -test.bench=".*"
查看性能测试时的内存情况:go test -bench=. -benchmem
查看每个函数的执行结果:go test -v
查看覆盖率:go test -cover
输出覆盖率到文件: 增加参数-coverprofile，如：go test -cover -coverprofile a.out
并使用go tool cover来查看覆盖率报告，如：go tool cover -func=a.out

####测试工具
**IO测试**
testing/iotest包中实现了常用的出错的Reader和Writer:
触发数据错误dataErrReader，通过DataErrReader()函数创建
读取一半内容的halfReader，通过HalfReader()函数创建
读取一个byte的oneByteReader，通过OneByteReader()函数创建
触发超时错误的timeoutReader，通过TimeoutReader()函数创建
写入指定位数内容后停止的truncateWriter，通过TruncateWriter()函数创建
读取时记录日志的readLogger，通过NewReadLogger()函数创建
写入时记录日志的writeLogger，通过NewWriteLogger()函数创建

**HTTP测试**
net/http/httptest包提供了HTTP相关代码的测试工具
httptest.Server用来构建临时的Server，测试发送与接收HTTP请求
httptest.ResponseRecorder用来记录应答

**黑盒测试**
testing/quick包实现了帮助黑盒测试
Check函数，测试的只返回bool值的黑盒函数f，Check会为f的每个参数设置任意值并多次调用
```
func TestOddMultipleOfThree(t *testing.T) {
    f := func(x int) bool {
        y := OddMultipleOfThree(x)
        return y%2 == 1 && y%3 == 0
    }
    if err := quick.Check(f, nil); err != nil {
        t.Error(err)
    }
}
```
CheckEqual函数，比较给定的两个黑盒函数是否相等
```
func CheckEqual(f, g interface{}, config *Config) (err error)
```

####测试框架
* stretchr/testify是个人觉得目前最好的测试框架，相比标准库中testing包支持如下特性：
* Easy assertions
* Mocking
* HTTP response trapping
* Testing suite interfaces and functions
